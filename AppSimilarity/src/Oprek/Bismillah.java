/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this temp1ate file, choose Tools | Temp1ates
 * and open the temp1ate in the editor.
 */
package Oprek;

import Oprek.createXML;
import Oprek.createXML_Strk;
import Tester.Klaster;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author Arif
 */
public class Bismillah extends javax.swing.JFrame {

    public int jumpetri1 = 0;
    public int jumpetri2 = 0;
    public int jumlah = 0;
    public int jumpetris1;
    public int jumpetris2;
    double[] temp = new double[10];

    DecimalFormat decimalFormat = new DecimalFormat("#0.000");
    public static int Irisan;
    public static int IrisanBhv;
    public static int Min;
    String Nama1;
    String Nama2;
    String NamaModel1;
    String NamaModel2;
    File filenya;
    String file;

    String modelSama1[];
    String modelSama2[];
    ArrayList<String[]> ListStrukCommonBhv;
    ArrayList<String[]> ListStrukCommonStruk;
    ArrayList<String[]> StrukCommonFragment1 = new ArrayList<>();
    ArrayList<String[]> StrukCommonFragment2 = new ArrayList<>();
    static Clustering clustering = new Clustering();
    static Klaster klater = new Klaster();
    static Clustering_Kopi clusteringkopi = new Clustering_Kopi();
    JFileChooser chooser = new JFileChooser(".");
    double jccrd;
    double dc;
    double cs;
    double ov;
    double modelPnml;
    
    double avg;
    double[] temporari1 = new double[100];
    double[] temporari2 = new double[100];
    double[] temporari3 = new double[100];
    double[] temporari4 = new double[100];
    double[] temporari5 = new double[100];
    double[] temporari6 = new double[100];
    double[] temporari7 = new double[100];
    double[] temporari8 = new double[100];
    double[] temporari9 = new double[100];
    double[] temporari10 = new double[100];
    double min1 = 1000.0;
    double max1 = 0.0;
    double min2 = 1000.0;
    double max2 = 0.0;
    double min3 = 1000.0;
    double max3 = 0.0;
    double min4 = 1000.0;
    double max4 = 0.0;
    double min5 = 1000.0;
    double max5 = 0.0;
    double min6 = 1000.0;
    double max6 = 0.0;
    double min7 = 1000.0;
    double max7 = 0.0;
    double min8 = 1000.0;
    double max8 = 0.0;
    double min9 = 1000.0;
    double max9 = 0.0;
    double min10 = 1000.0;
    double max10 = 0.0;
    double[]tampungmax=new double[10];

    /**
     * Creates new form CobaDesain
     */
    public Bismillah() {

        initComponents();
        setResizable(false); // insert this line

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel12 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        AreaPN1A = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        AreaPN1B = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        AreaPN2B = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        AreaPN2A = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        namamodel1 = new javax.swing.JLabel();
        namamodel2 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        AreaIrisanStruk = new javax.swing.JTextArea();
        jScrollPane15 = new javax.swing.JScrollPane();
        AreaIrisanBhv = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HasilHitungJC1 = new javax.swing.JTextField();
        HasilHitungDice1 = new javax.swing.JTextField();
        HasilHitungCS1 = new javax.swing.JTextField();
        HasilHitungOV1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        HasilHitungJC2 = new javax.swing.JTextField();
        HasilHitungDice2 = new javax.swing.JTextField();
        HasilHitungCS2 = new javax.swing.JTextField();
        HasilHitungOV2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        AreaSem1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        AreaSem2 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        cocok1a = new javax.swing.JTextField();
        cocok2a = new javax.swing.JTextField();
        cocok3a = new javax.swing.JTextField();
        cocok4a = new javax.swing.JTextField();
        cocok5a = new javax.swing.JTextField();
        cocok6a = new javax.swing.JTextField();
        cocok7a = new javax.swing.JTextField();
        cocok8a = new javax.swing.JTextField();
        cocok9a = new javax.swing.JTextField();
        cocok10a = new javax.swing.JTextField();
        jScrollPane21 = new javax.swing.JScrollPane();
        Add = new javax.swing.JTextArea();
        cocok1b = new javax.swing.JTextField();
        cocok2b = new javax.swing.JTextField();
        cocok3b = new javax.swing.JTextField();
        cocok4b = new javax.swing.JTextField();
        cocok5b = new javax.swing.JTextField();
        cocok6b = new javax.swing.JTextField();
        cocok7b = new javax.swing.JTextField();
        cocok8b = new javax.swing.JTextField();
        cocok9b = new javax.swing.JTextField();
        cocok10b = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        valueavgsmn = new javax.swing.JTextField();
        value10 = new javax.swing.JTextField();
        value9 = new javax.swing.JTextField();
        value8 = new javax.swing.JTextField();
        value7 = new javax.swing.JTextField();
        value6 = new javax.swing.JTextField();
        value5 = new javax.swing.JTextField();
        value4 = new javax.swing.JTextField();
        value3 = new javax.swing.JTextField();
        value2 = new javax.swing.JTextField();
        value1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        AreaMatrikStrk = new javax.swing.JTextArea();
        jScrollPane16 = new javax.swing.JScrollPane();
        AreaMatrikBhv = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        AreaMatrkSmt = new javax.swing.JTextArea();
        jLabel29 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        tmpattres = new javax.swing.JTextField();
        threshold = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        Clusterbhv = new javax.swing.JTextArea();
        jScrollPane17 = new javax.swing.JScrollPane();
        Clusterstruk = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        Clusterbhvangka = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Clusterstrukangka = new javax.swing.JTextArea();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        Commonstrk = new javax.swing.JTextArea();
        jScrollPane18 = new javax.swing.JScrollPane();
        Commonbhv = new javax.swing.JTextArea();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        TempatPNMLStrk = new javax.swing.JTextField();
        buatcommon = new javax.swing.JButton();
        TempatPNMLBhv = new javax.swing.JTextField();
        Commonmix = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        Reset = new javax.swing.JButton();
        LoadArea1 = new javax.swing.JTextField();
        LoadArea2 = new javax.swing.JTextField();
        Load2 = new javax.swing.JButton();
        Load1 = new javax.swing.JButton();
        Proses = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel12.setLayout(null);

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 255, 102)))); // NOI18N
        jPanel14.setLayout(null);

        AreaPN1A.setColumns(20);
        AreaPN1A.setRows(5);
        jScrollPane7.setViewportView(AreaPN1A);

        jPanel14.add(jScrollPane7);
        jScrollPane7.setBounds(20, 70, 130, 230);

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel9.setText("STRUCTURAL");
        jPanel14.add(jLabel9);
        jLabel9.setBounds(40, 50, 81, 18);

        AreaPN1B.setColumns(20);
        AreaPN1B.setRows(5);
        jScrollPane8.setViewportView(AreaPN1B);

        jPanel14.add(jScrollPane8);
        jScrollPane8.setBounds(160, 70, 130, 230);

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel10.setText("TARS");
        jPanel14.add(jLabel10);
        jLabel10.setBounds(210, 50, 32, 18);

        AreaPN2B.setColumns(20);
        AreaPN2B.setRows(5);
        jScrollPane9.setViewportView(AreaPN2B);

        jPanel14.add(jScrollPane9);
        jScrollPane9.setBounds(470, 70, 130, 230);

        AreaPN2A.setColumns(20);
        AreaPN2A.setRows(5);
        jScrollPane13.setViewportView(AreaPN2A);

        jPanel14.add(jScrollPane13);
        jScrollPane13.setBounds(330, 70, 130, 230);

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel15.setText("MODEL 1");
        jPanel14.add(jLabel15);
        jLabel15.setBounds(60, 20, 55, 18);

        jLabel25.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel25.setText("STRUCTURAL");
        jPanel14.add(jLabel25);
        jLabel25.setBounds(350, 50, 81, 18);

        jLabel26.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel26.setText("TARS");
        jPanel14.add(jLabel26);
        jLabel26.setBounds(520, 50, 32, 18);

        jLabel27.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel27.setText("MODEL 2");
        jPanel14.add(jLabel27);
        jLabel27.setBounds(360, 20, 55, 18);

        namamodel1.setFont(new java.awt.Font("Trebuchet MS", 0, 10)); // NOI18N
        namamodel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        namamodel1.setText("-");
        jPanel14.add(namamodel1);
        namamodel1.setBounds(140, 20, 150, 15);

        namamodel2.setFont(new java.awt.Font("Trebuchet MS", 0, 10)); // NOI18N
        namamodel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        namamodel2.setText("-");
        jPanel14.add(namamodel2);
        namamodel2.setBounds(440, 20, 150, 15);

        jTabbedPane2.addTab("PARSING", jPanel14);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 255, 102))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel2.setText("STRUC - INTERSECTION");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel3.setText("TARS - INTERSECTION");

        AreaIrisanStruk.setColumns(20);
        AreaIrisanStruk.setRows(5);
        jScrollPane14.setViewportView(AreaIrisanStruk);

        AreaIrisanBhv.setColumns(20);
        AreaIrisanBhv.setRows(5);
        jScrollPane15.setViewportView(AreaIrisanBhv);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81))))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("INTERSECTION", jPanel15);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 255, 102))); // NOI18N

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel16.setText("JACCARD COEFF");

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel17.setText("DICE COEFF");

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel18.setText("COSINE COEFF");

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel19.setText("OVERLAP COEFF");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel4.setText("STRUCTURAL SIMILARITY");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel5.setText("BEHAVIOUR SIMILARITY");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HasilHitungDice1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HasilHitungJC1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HasilHitungCS1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HasilHitungOV1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HasilHitungOV2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(HasilHitungJC2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(HasilHitungCS2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(HasilHitungDice2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel4)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel5)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel16)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel17)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel18)
                            .addGap(37, 37, 37))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(HasilHitungJC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(HasilHitungDice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(HasilHitungCS1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(HasilHitungOV1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(HasilHitungJC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(HasilHitungDice2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(HasilHitungCS2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(HasilHitungOV2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("SIM - VALUE", jPanel2);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        AreaSem1.setColumns(20);
        AreaSem1.setRows(5);
        jScrollPane19.setViewportView(AreaSem1);

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel8.setText("MODEL 1");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel7.setText("MODEL 2");

        AreaSem2.setColumns(20);
        AreaSem2.setRows(5);
        jScrollPane20.setViewportView(AreaSem2);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("SEMANTIC - COMPARE", jPanel4);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        cocok1a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok2a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok3a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok4a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok5a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok6a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok7a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok8a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok9a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok10a.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        Add.setColumns(20);
        Add.setRows(5);
        jScrollPane21.setViewportView(Add);

        cocok1b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok2b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok3b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok4b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok5b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok6b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok7b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok8b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok9b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        cocok10b.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jButton1.setText("PROCESS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        value10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        value1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel21.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel21.setText("HELP BOX -->>");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok1a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok1b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok2a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok2b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok3a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok3b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok4a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok4b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok5a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok5b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok6a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok6b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok7a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok7b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok8a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok8b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok9a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok9b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cocok10a, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(cocok10b, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(value10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valueavgsmn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(cocok1a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cocok1b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok2a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok2b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok3a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok3b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok4a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok4b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok5a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok5b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok6a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok6b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok7a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok7b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok8a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok8b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok9a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok9b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cocok10a, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cocok10b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(value10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(26, 26, 26))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(valueavgsmn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel21))))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("SEMANTIC - SIM - VALUE", jPanel5);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 255, 102))); // NOI18N
        jPanel18.setLayout(null);

        AreaMatrikStrk.setColumns(20);
        AreaMatrikStrk.setRows(5);
        jScrollPane10.setViewportView(AreaMatrikStrk);

        jPanel18.add(jScrollPane10);
        jScrollPane10.setBounds(50, 50, 166, 250);

        AreaMatrikBhv.setColumns(20);
        AreaMatrikBhv.setRows(5);
        jScrollPane16.setViewportView(AreaMatrikBhv);

        jPanel18.add(jScrollPane16);
        jScrollPane16.setBounds(240, 50, 166, 250);

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel11.setText("STRUCTURAL");
        jPanel18.add(jLabel11);
        jLabel11.setBounds(90, 20, 81, 18);

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel12.setText("SEMANTIC REFERENCE");
        jPanel18.add(jLabel12);
        jLabel12.setBounds(440, 20, 160, 18);

        AreaMatrkSmt.setColumns(20);
        AreaMatrkSmt.setRows(5);
        jScrollPane22.setViewportView(AreaMatrkSmt);

        jPanel18.add(jScrollPane22);
        jScrollPane22.setBounds(430, 50, 166, 250);

        jLabel29.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel29.setText("BEHAVIOURAL");
        jPanel18.add(jLabel29);
        jLabel29.setBounds(270, 20, 89, 18);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("METRIC MODEL COMPARE", jPanel17);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 255, 102))); // NOI18N

        threshold.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        threshold.setText("CLUSTER SPECIFIC");
        threshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel14.setText("STRUCTURAL");

        Clusterbhv.setColumns(20);
        Clusterbhv.setRows(5);
        jScrollPane11.setViewportView(Clusterbhv);

        Clusterstruk.setColumns(20);
        Clusterstruk.setRows(5);
        jScrollPane17.setViewportView(Clusterstruk);

        jComboBox1.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Cluster Based Business Process --", "Akademik", "Kepegawaian", "Kesantrian", "Penerimaan Siswa Baru", "Sarana Dan Prasarana" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel30.setText("BEHAVIOURAL");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        Clusterbhvangka.setViewportView(jTextArea1);

        Clusterstrukangka.setColumns(20);
        Clusterstrukangka.setRows(5);
        jScrollPane2.setViewportView(Clusterstrukangka);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(threshold)
                .addGap(18, 18, 18)
                .addComponent(tmpattres, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Clusterbhvangka, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11)
                            .addComponent(jScrollPane17)))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(257, 257, 257)
                                .addComponent(jLabel30)))
                        .addGap(0, 87, Short.MAX_VALUE)))
                .addGap(28, 28, 28))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tmpattres, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(17, 17, 17)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Clusterbhvangka, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("CLUSTERING", jPanel19);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 255, 102))); // NOI18N

        Commonstrk.setColumns(20);
        Commonstrk.setRows(5);
        jScrollPane12.setViewportView(Commonstrk);

        Commonbhv.setColumns(20);
        Commonbhv.setRows(5);
        jScrollPane18.setViewportView(Commonbhv);

        jLabel23.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel23.setText("STRUCTURAL");

        jLabel24.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel24.setText("BEHAVIOURAL");

        buatcommon.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        buatcommon.setText("GENERATE PNML");
        buatcommon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buatcommonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addGap(112, 112, 112))
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                        .addComponent(buatcommon)
                        .addGap(236, 236, 236))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(TempatPNMLStrk, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TempatPNMLBhv, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Commonmix, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(39, Short.MAX_VALUE))))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jScrollPane18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TempatPNMLStrk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TempatPNMLBhv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(Commonmix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buatcommon, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("COMM - FRAGMENT", jPanel21);

        jPanel12.add(jTabbedPane2);
        jTabbedPane2.setBounds(90, 200, 800, 330);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        Reset.setBackground(new java.awt.Color(102, 255, 255));
        Reset.setFont(new java.awt.Font("Alien League Italic", 0, 18)); // NOI18N
        Reset.setText("RESET");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        LoadArea1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadArea1ActionPerformed(evt);
            }
        });

        Load2.setBackground(new java.awt.Color(102, 255, 255));
        Load2.setFont(new java.awt.Font("Alien League Italic", 0, 18)); // NOI18N
        Load2.setText("LOAD 2");
        Load2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load2ActionPerformed(evt);
            }
        });

        Load1.setBackground(new java.awt.Color(102, 255, 255));
        Load1.setFont(new java.awt.Font("Alien League Italic", 0, 18)); // NOI18N
        Load1.setText("LOAD 1");
        Load1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load1ActionPerformed(evt);
            }
        });

        Proses.setBackground(new java.awt.Color(102, 255, 255));
        Proses.setFont(new java.awt.Font("Alien League Italic", 0, 18)); // NOI18N
        Proses.setText("PROCESS");
        Proses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProsesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Load1)
                    .addComponent(Load2))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LoadArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                    .addComponent(LoadArea2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Proses)
                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoadArea2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Load2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoadArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Load1)
                            .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(Proses)))
                .addContainerGap())
        );

        jPanel12.add(jPanel1);
        jPanel1.setBounds(90, 80, 800, 99);

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setFont(new java.awt.Font("Alien League 3D", 0, 24)); // NOI18N
        jLabel1.setText("Bussiness Process Management - Similarity Application");
        jPanel12.add(jLabel1);
        jLabel1.setBounds(200, 30, 640, 28);

        jButton4.setFont(new java.awt.Font("Alien League Italic", 0, 18)); // NOI18N
        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel12.add(jButton4);
        jButton4.setBounds(750, 550, 125, 25);

        jLabel6.setText("jLabel6");
        jPanel12.add(jLabel6);
        jLabel6.setBounds(120, 40, 34, 14);

        jMenu1.setText("File");

        jMenuItem2.setText("Reset");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Option");

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(986, 649));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadArea1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadArea1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LoadArea1ActionPerformed

    private void Load1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load1ActionPerformed
        // TODO add your handling code here:
        int buka_dialog = chooser.showOpenDialog(Bismillah.this);
        if (buka_dialog == JFileChooser.APPROVE_OPTION) {
            filenya = chooser.getSelectedFile();
            LoadArea1.setText(filenya.getPath());
            NamaModel1 = filenya.getPath();
            Nama1 = filenya.getName();
            if (namamodel1.getText().equals("-")) {
                namamodel1.setText(Nama1);
            }
        }
    }//GEN-LAST:event_Load1ActionPerformed

    private void Load2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load2ActionPerformed
        int buka_dialog = chooser.showOpenDialog(Bismillah.this);
        if (buka_dialog == JFileChooser.APPROVE_OPTION) {
            filenya = chooser.getSelectedFile();
            LoadArea2.setText(filenya.getPath());
            NamaModel2 = filenya.getPath();
            Nama2 = filenya.getName();
            if (namamodel2.getText().equals("-")) {
                namamodel2.setText(Nama2);
            }
        }

    }//GEN-LAST:event_Load2ActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        ParsingLagiPanjangStruk p1 = new ParsingLagiPanjangStruk();
        ParsingLagiPanjangBhv p2 = new ParsingLagiPanjangBhv();

        max1 = 0.0;
        max2 = 0.0;
        max3 = 0.0;
        max4 = 0.0;
        max5 = 0.0;
        max6 = 0.0;
        max7 = 0.0;
        max8 = 0.0;
        max9 = 0.0;
        max10 = 0.0;
        avg=0.0;
//        temporaribersama=null;
//        tampungmax=null;
        
        namamodel1.setText("-");
        namamodel2.setText("-");
        LoadArea1.setText(null);
        LoadArea2.setText(null);
        AreaPN1A.setText(null);
        AreaPN1B.setText(null);
        AreaPN2A.setText(null);
        AreaPN2B.setText(null);
        AreaSem1.setText(null);
        AreaSem2.setText(null);
        Add.setText(null);
        AreaIrisanStruk.setText("");
        AreaIrisanBhv.setText("");
        HasilHitungJC1.setText("");
        HasilHitungDice1.setText("");
        HasilHitungCS1.setText("");
        HasilHitungOV1.setText("");
        HasilHitungJC2.setText("");
        HasilHitungDice2.setText("");
        HasilHitungCS2.setText("");
        HasilHitungOV2.setText("");
        valueavgsmn.setText("");
        cocok1a.setText("");
        cocok2a.setText("");
        cocok3a.setText("");
        cocok4a.setText("");
        cocok5a.setText("");
        cocok6a.setText("");
        cocok7a.setText("");
        cocok8a.setText("");
        cocok9a.setText("");
        cocok10a.setText("");
        cocok1b.setText("");
        cocok2b.setText("");
        cocok3b.setText("");
        cocok4b.setText("");
        cocok5b.setText("");
        cocok6b.setText("");
        cocok7b.setText("");
        cocok8b.setText("");
        cocok9b.setText("");
        cocok10b.setText("");
        value1.setText("");
        value2.setText("");
        value3.setText("");
        value4.setText("");
        value5.setText("");
        value6.setText("");
        value7.setText("");
        value8.setText("");
        value9.setText("");
        value10.setText("");
        NamaModel1 = null;
        NamaModel2 = null;
    }//GEN-LAST:event_ResetActionPerformed

    public void addModel1(double hasilSim1, String[] PNML1) {

        ArrayList<String[]> modelnya = new ArrayList<>();
        modelnya.add(PNML1);
        for (int i = 0; i < modelnya.size(); i++) {
            String[] modelPnml = modelnya.get(i);
            for (int j = 0; j < modelPnml.length; j++) {
                AreaMatrikStrk.append(modelPnml[j] + "  ");
            }
            AreaMatrikStrk.append("\n");

        }

    }

    public void addModel2(double hasilSim2, String[] PNML2) {

        ArrayList<String[]> modelnya = new ArrayList<>();
        modelnya.add(PNML2);
        for (int i = 0; i < modelnya.size(); i++) {
            String[] modelPnml = modelnya.get(i);
            for (int j = 0; j < modelPnml.length; j++) {
                AreaMatrikBhv.append(modelPnml[j] + "  ");
            }
            AreaMatrikBhv.append("\n");
        }
    }

    public void addModelSemantik(String[] PNML1) {

        ArrayList<String[]> modelnya = new ArrayList<>();
        modelnya.add(PNML1);
        for (int i = 0; i < modelnya.size(); i++) {
            String[] modelPnml = modelnya.get(i);
            for (int j = 0; j < modelPnml.length; j++) {
                AreaMatrkSmt.append(modelPnml[j] + "  ");
            }
            AreaMatrkSmt.append("\n");

        }

    }

    private void ProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProsesActionPerformed
//        strukturalutama();
//        behavioralutama();
//        semantikutama();
        gabunganparsing();

    }//GEN-LAST:event_ProsesActionPerformed
    void gabunganparsing() {

        ParsingSmtStruk jdm = new ParsingSmtStruk();
        jdm.Parsing1(NamaModel1);
        jdm.Parsing2(NamaModel2);
        jumpetris1 = 0;
        jumpetris2 = 0;
        for (int i = 0; i < jdm.transisi1.length; i++) {
            if (jdm.transisi1[i] != null) {
                System.out.println(jdm.transisi1[i]);
                jumpetris1++;
                AreaSem1.append(jdm.transisi1[i] + "\n");
            }
        }
        cocok1a.setText(jdm.transisi1[0]);
        cocok2a.setText(jdm.transisi1[1]);
        cocok3a.setText(jdm.transisi1[2]);
        cocok4a.setText(jdm.transisi1[3]);
        cocok5a.setText(jdm.transisi1[4]);
        cocok6a.setText(jdm.transisi1[5]);
        cocok7a.setText(jdm.transisi1[6]);
        cocok8a.setText(jdm.transisi1[7]);
        cocok9a.setText(jdm.transisi1[8]);
        cocok10a.setText(jdm.transisi1[9]);

        for (int i = 0; i < jdm.transisi2.length; i++) {
            if (jdm.transisi2[i] != null) {
                System.out.println(jdm.transisi2[i]);
                jumpetris2++;
                AreaSem2.append(jdm.transisi2[i] + "\n");
            }
        }
        cocok1b.setText(jdm.transisi2[0]);
        cocok2b.setText(jdm.transisi2[1]);
        cocok3b.setText(jdm.transisi2[2]);
        cocok4b.setText(jdm.transisi2[3]);
        cocok5b.setText(jdm.transisi2[4]);
        cocok6b.setText(jdm.transisi2[5]);
        cocok7b.setText(jdm.transisi2[6]);
        cocok8b.setText(jdm.transisi2[7]);
        cocok9b.setText(jdm.transisi2[8]);
        cocok10b.setText(jdm.transisi2[9]);

        Levenshtein lvs = new Levenshtein();
//        if (cocok1a.getText().equals("") || cocok1b.getText().equals("")) {
//            value1.setText(String.valueOf(0.0));
//            temp[0] = 0.0;
//        } else {
//            value1.setText(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok1b.getText())));
//            temp[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok1b.getText())));;
//        }
//        
//        if (cocok2a.getText().equals("") || cocok2b.getText().equals("")) {
//            value2.setText(String.valueOf(0.0));
//            temp[1] = 0.0;
//        } else {
//            value2.setText(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok2b.getText())));
//            temp[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok2b.getText())));
//        }
//
//        if (cocok3a.getText().equals("") || cocok3b.getText().equals("")) {
//            value3.setText(String.valueOf(0.0));
//            temp[2] = 0.0;
//        } else {
//            value3.setText(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok3b.getText())));
//            temp[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok3b.getText())));
//        }
//
//        if (cocok4a.getText().equals("") || cocok4b.getText().equals("")) {
//            value4.setText(String.valueOf(0.0));
//            temp[3] = 0.0;
//        } else {
//            value4.setText(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok4b.getText())));
//            temp[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok4b.getText())));
//        }
//        if (cocok5a.getText().equals("") || cocok5b.getText().equals("")) {
//            value5.setText(String.valueOf(0.0));
//            temp[4] = 0.0;
//        } else {
//            value5.setText(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok5b.getText())));
//            temp[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok5b.getText())));
//
//        }
//        if (cocok6a.getText().equals("") || cocok6b.getText().equals("")) {
//            value6.setText(String.valueOf(0.0));
//            temp[5] = 0.0;
//        } else {
//            value6.setText(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok6b.getText())));
//            temp[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok6b.getText())));
//        }
//
//        if (cocok7a.getText().equals("") || cocok7b.getText().equals("")) {
//            value7.setText(String.valueOf(0.0));
//            temp[6] = 0.0;
//        } else {
//            value7.setText(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok7b.getText())));
//            temp[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok7b.getText())));
//        }
//        if (cocok8a.getText().equals("") || cocok8b.getText().equals("")) {
//            value8.setText(String.valueOf(0.0));
//            temp[7] = 0.0;
//        } else {
//            value8.setText(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok8b.getText())));
//            temp[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok8b.getText())));
//        }
//        if (cocok9a.getText().equals("") || cocok9b.getText().equals("")) {
//            value9.setText(String.valueOf(0.0));
//            temp[8] = 0.0;
//        } else {
//            value9.setText(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok9b.getText())));
//            temp[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok9b.getText())));
//        }
//        if (cocok10a.getText().equals("") || cocok10b.getText().equals("")) {
//            value10.setText(String.valueOf(0.0));
//            temp[9] = 0.0;
//        } else {
//            value10.setText(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok10b.getText())));
//            temp[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok10b.getText())));
//        }
        //ia
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari1[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok1b.getText())));
                temporari1[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok2b.getText())));
                temporari1[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok3b.getText())));
                temporari1[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok4b.getText())));
                temporari1[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok5b.getText())));
                temporari1[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok6b.getText())));
                temporari1[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok7b.getText())));
                temporari1[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok8b.getText())));
                temporari1[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok9b.getText())));
                temporari1[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {

            if (temporari1[c] > max1) {
                max1 = temporari1[c];
            } else if (temporari1[c] < min1) {
                min1 = temporari1[c];
            }
            System.out.println(temporari1[c]);

        }
        tampungmax[0]=max1;
        System.out.println("maksimal 1 " + max1);

        if (cocok1a.getText().equals("") && cocok1b.getText().equals("")) {
            tampungmax[0]=0.0;
            value1.setText(String.valueOf(tampungmax[0]));
        } else {
            value1.setText(String.valueOf(tampungmax[0]));
        }

//2a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari2[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok1b.getText())));
                temporari2[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok2b.getText())));
                temporari2[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok3b.getText())));
                temporari2[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok4b.getText())));
                temporari2[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok5b.getText())));
                temporari2[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok6b.getText())));
                temporari2[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok7b.getText())));
                temporari2[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok8b.getText())));
                temporari2[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok9b.getText())));
                temporari2[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari2[c] > max2) {
                max2 = temporari2[c];
            } else if (temporari2[c] < min2) {
                min2 = temporari2[c];
            }
            System.out.println(temporari2[c]);

        }
        tampungmax[1]=max2;
        System.out.println("maksimal 2 " + max2);

        if (cocok2a.getText().equals("") && cocok2b.getText().equals("")) {
            tampungmax[1]=0.0;
            value2.setText(String.valueOf(tampungmax[1]));
        } else {
            value2.setText(String.valueOf(tampungmax[1]));
        }
        //3a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari3[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok1b.getText())));
                temporari3[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok2b.getText())));
                temporari3[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok3b.getText())));
                temporari3[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok4b.getText())));
                temporari3[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok5b.getText())));
                temporari3[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok6b.getText())));
                temporari3[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok7b.getText())));
                temporari3[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok8b.getText())));
                temporari3[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok9b.getText())));
                temporari3[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari3[c] > max3) {
                max3 = temporari3[c];
            } else if (temporari3[c] < min3) {
                min3 = temporari3[c];
            }
            System.out.println(temporari3[c]);

        }
        tampungmax[2]=max3;
        System.out.println("maksimal 3 " + max3);
        if (cocok3a.getText().equals("") && cocok3b.getText().equals("")) {
        tampungmax[2]=0.0;
            value3.setText(String.valueOf(tampungmax[2]));
        } else {

            value3.setText(String.valueOf(tampungmax[2]));
        }
        //4a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari4[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok1b.getText())));
                temporari4[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok2b.getText())));
                temporari4[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok3b.getText())));
                temporari4[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok4b.getText())));
                temporari4[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok5b.getText())));
                temporari4[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok6b.getText())));
                temporari4[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok7b.getText())));
                temporari4[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok8b.getText())));
                temporari4[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok9b.getText())));
                temporari4[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari4[c] > max4) {
                max4 = temporari4[c];
            } else if (temporari4[c] < min4) {
                min4 = temporari4[c];
            }
            System.out.println(temporari4[c]);

        }
        tampungmax[3]=max4;
        System.out.println("maksimal 4 " + max4);
        if (cocok4a.getText().equals("") && cocok4b.getText().equals("")) {
            tampungmax[3]=0.0;
            value4.setText(String.valueOf(tampungmax[3]));
        } else {

            value4.setText(String.valueOf(tampungmax[3]));
        }
        //5a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari5[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok1b.getText())));
                temporari5[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok2b.getText())));
                temporari5[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok3b.getText())));
                temporari5[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok4b.getText())));
                temporari5[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok5b.getText())));
                temporari5[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok6b.getText())));
                temporari5[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok7b.getText())));
                temporari5[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok8b.getText())));
                temporari5[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok9b.getText())));
                temporari5[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari5[c] > max5) {
                max5 = temporari5[c];
            } else if (temporari5[c] < min5) {
                min5 = temporari5[c];
            }
            System.out.println(temporari5[c]);

        }
        tampungmax[4]=max5;
        System.out.println("maksimal 5 " + max5);
        if (cocok5a.getText().equals("") && cocok5b.getText().equals("")) {
   tampungmax[4]=0.0;
            value5.setText(String.valueOf(tampungmax[4]));
        } else {
            value5.setText(String.valueOf(tampungmax[4]));
        }//6a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari6[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok1b.getText())));
                temporari6[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok2b.getText())));
                temporari6[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok3b.getText())));
                temporari6[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok4b.getText())));
                temporari6[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok5b.getText())));
                temporari6[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok6b.getText())));
                temporari6[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok7b.getText())));
                temporari6[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok8b.getText())));
                temporari6[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok9b.getText())));
                temporari6[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari6[c] > max6) {
                max6 = temporari6[c];
            } else if (temporari6[c] < min6) {
                min6 = temporari6[c];
            }
            System.out.println(temporari6[c]);

        }tampungmax[5]=max6;
        System.out.println("maksimal 6 " + max6);
        if (cocok6a.getText().equals("") && cocok6b.getText().equals("")) {
            tampungmax[5]=0.0;
            value6.setText(String.valueOf(tampungmax[5]));
        } else {
            value6.setText(String.valueOf(tampungmax[5]));
        }//7a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari7[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok1b.getText())));
                temporari7[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok2b.getText())));
                temporari7[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok3b.getText())));
                temporari7[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok4b.getText())));
                temporari7[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok5b.getText())));
                temporari7[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok6b.getText())));
                temporari7[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok7b.getText())));
                temporari7[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok8b.getText())));
                temporari7[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok9b.getText())));
                temporari7[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari7[c] > max7) {
                max7 = temporari7[c];
            } else if (temporari7[c] < min7) {
                min7 = temporari7[c];
            }
            System.out.println(temporari7[c]);

        }
        tampungmax[6]=max7;
        System.out.println("maksimal 7 " + max7);
        if (cocok7a.getText().equals("") && cocok7b.getText().equals("")) {
            tampungmax[6]=0.0;
            value7.setText(String.valueOf(tampungmax[6]));
        } else {
            value7.setText(String.valueOf(tampungmax[6]));
        }
        //8a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari8[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok1b.getText())));
                temporari8[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok2b.getText())));
                temporari8[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok3b.getText())));
                temporari8[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok4b.getText())));
                temporari8[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok5b.getText())));
                temporari8[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok6b.getText())));
                temporari8[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok7b.getText())));
                temporari8[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok8b.getText())));
                temporari8[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok9b.getText())));
                temporari8[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari8[c] > max8) {
                max8 = temporari8[c];
            } else if (temporari8[c] < min8) {
                min8 = temporari8[c];
            }
            System.out.println(temporari8[c]);

        }
        tampungmax[7]=max8;
        System.out.println("maksimal 8 " + max8);
        if (cocok8a.getText().equals("") && cocok8b.getText().equals("")) {
            tampungmax[7]=0.0;
            value8.setText(String.valueOf(tampungmax[7]));
        } else {
            value8.setText(String.valueOf(tampungmax[7]));
        }
        //9a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari9[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok1b.getText())));
                temporari9[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok2b.getText())));
                temporari9[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok3b.getText())));
                temporari9[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok4b.getText())));
                temporari9[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok5b.getText())));
                temporari9[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok6b.getText())));
                temporari9[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok7b.getText())));
                temporari9[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok8b.getText())));
                temporari9[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok9b.getText())));
                temporari9[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari9[c] > max9) {
                max9 = temporari9[c];
            } else if (temporari9[c] < min9) {
                min9 = temporari9[c];
            }
            System.out.println(temporari9[c]);

        }
        tampungmax[8]=max9;
        System.out.println("maksimal 9 " + max9);
        
        if (cocok9a.getText().equals("") && cocok9b.getText().equals("")) {
           tampungmax[8]=0.0;
            value9.setText(String.valueOf(tampungmax[8]));
        } else {
            value9.setText(String.valueOf(tampungmax[8]));
        }
        //10a
        for (int a = 0; a < 10; a++) {
            for (int b = 0; b < 10; b++) {
                temporari10[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok1b.getText())));
                temporari10[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok2b.getText())));
                temporari10[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok3b.getText())));
                temporari10[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok4b.getText())));
                temporari10[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok5b.getText())));
                temporari10[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok6b.getText())));
                temporari10[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok7b.getText())));
                temporari10[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok8b.getText())));
                temporari10[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok9b.getText())));
                temporari10[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok10b.getText())));
            }
        }
        for (int c = 0; c < 10; c++) {
            if (temporari10[c] > max10) {
                max10 = temporari10[c];
            } else if (temporari10[c] < min10) {
                min10 = temporari10[c];
            }
            System.out.println(temporari10[c]);

        }
        tampungmax[9]=max10;
        System.out.println("maksimal 10 " + max10);
        if (cocok10a.getText().equals("") && cocok10b.getText().equals("")) {
            tampungmax[9]=0.0;
            value10.setText(String.valueOf(tampungmax[9]));
        } else {
            value10.setText(String.valueOf(tampungmax[9]));
        }

        //=======================================================================//

        jumlah = 0;
//        for (int cb = 0; cb < temp.length; cb++) {
//            if (temp[cb] != 0.0) {
//                System.out.print(temp[cb] + " ");
//                jumlah++;
//            }
//        }
        for (int d = 0; d < tampungmax.length; d++) {
            if (tampungmax[d] != 0.0) {
                jumlah++;
            }
        }

        System.out.println("jumlahnya " + jumlah);
        Bismillah apk = new Bismillah();
        avg = apk.rata(tampungmax[0], tampungmax[1], tampungmax[2], tampungmax[3], tampungmax[4], tampungmax[5],tampungmax[6], tampungmax[7], tampungmax[8], tampungmax[9], jumlah);
        String hasilavg = decimalFormat.format(avg);
        System.out.println("hasilnya adalah "+avg);
        valueavgsmn.setText(String.valueOf(avg));

        
        
        String InputNama1StrukGB = namamodel1.getText();
        String InputNama2StrukGB = namamodel2.getText();
        String InputKeMetricStruk[] = {InputNama1StrukGB, InputNama2StrukGB, hasilavg};
        addModelSemantik(InputKeMetricStruk);

        //==================================================================================================================//
        //Panggil kelas parsing
        ParsingLagiPanjangStruk p2 = new ParsingLagiPanjangStruk();

        //======================
        p2.Parsing(NamaModel1);
        p2.Parsing2(NamaModel2);

        jumpetri1 = 0;
        jumpetri2 = 0;

        //Struktural
        for (int i = 0; i < p2.tampungsemua.length; i++) {
            if (p2.tampungsemua[i] != null) {
                System.out.println(p2.tampungsemua[i]);
                jumpetri1++;
                AreaPN1A.append(p2.tampungsemua[i] + "\n");
            }
        }

        for (int i = 0; i < p2.tampungsemua2.length; i++) {
            if (p2.tampungsemua2[i] != null) {
                System.out.println(p2.tampungsemua2[i]);
                jumpetri2++;
                AreaPN2A.append(p2.tampungsemua2[i] + "\n");
            }
        }

        Irisan = p2.intersect(p2.tampungsemua, p2.tampungsemua2).size() - 1;
        String[] tampungirisanstrk = new String[30];

        for (String tampil : p2.intersect(p2.tampungsemua, p2.tampungsemua2)) {
            if (tampil != null) {
                if (tampungirisanstrk[0] == null) {
                    tampungirisanstrk[0] = tampil;
                } else if (tampungirisanstrk[1] == null) {
                    tampungirisanstrk[1] = tampil;
                } else if (tampungirisanstrk[2] == null) {
                    tampungirisanstrk[2] = tampil;
                } else if (tampungirisanstrk[3] == null) {
                    tampungirisanstrk[3] = tampil;
                } else if (tampungirisanstrk[4] == null) {
                    tampungirisanstrk[4] = tampil;
                } else if (tampungirisanstrk[5] == null) {
                    tampungirisanstrk[5] = tampil;
                } else if (tampungirisanstrk[6] == null) {
                    tampungirisanstrk[6] = tampil;
                } else if (tampungirisanstrk[7] == null) {
                    tampungirisanstrk[7] = tampil;
                } else if (tampungirisanstrk[8] == null) {
                    tampungirisanstrk[8] = tampil;
                } else if (tampungirisanstrk[9] == null) {
                    tampungirisanstrk[9] = tampil;
                } else if (tampungirisanstrk[10] == null) {
                    tampungirisanstrk[10] = tampil;
                } else if (tampungirisanstrk[11] == null) {
                    tampungirisanstrk[11] = tampil;
                } else if (tampungirisanstrk[12] == null) {
                    tampungirisanstrk[12] = tampil;
                } else if (tampungirisanstrk[13] == null) {
                    tampungirisanstrk[13] = tampil;
                } else if (tampungirisanstrk[14] == null) {
                    tampungirisanstrk[14] = tampil;
                } else if (tampungirisanstrk[15] == null) {
                    tampungirisanstrk[15] = tampil;
                } else if (tampungirisanstrk[16] == null) {
                    tampungirisanstrk[16] = tampil;
                } else if (tampungirisanstrk[17] == null) {
                    tampungirisanstrk[17] = tampil;
                } else if (tampungirisanstrk[18] == null) {
                    tampungirisanstrk[18] = tampil;
                } else if (tampungirisanstrk[19] == null) {
                    tampungirisanstrk[19] = tampil;
                } else if (tampungirisanstrk[20] == null) {
                    tampungirisanstrk[20] = tampil;
                } else if (tampungirisanstrk[21] == null) {
                    tampungirisanstrk[21] = tampil;
                } else if (tampungirisanstrk[22] == null) {
                    tampungirisanstrk[22] = tampil;
                } else if (tampungirisanstrk[23] == null) {
                    tampungirisanstrk[23] = tampil;
                } else if (tampungirisanstrk[24] == null) {
                    tampungirisanstrk[24] = tampil;
                } else if (tampungirisanstrk[25] == null) {
                    tampungirisanstrk[25] = tampil;
                } else if (tampungirisanstrk[26] == null) {
                    tampungirisanstrk[26] = tampil;
                } else if (tampungirisanstrk[27] == null) {
                    tampungirisanstrk[27] = tampil;
                } else if (tampungirisanstrk[28] == null) {
                    tampungirisanstrk[28] = tampil;
                } else if (tampungirisanstrk[29] == null) {
                    tampungirisanstrk[29] = tampil;
                }
                System.out.println("hasilnya : " + tampil);
                AreaIrisanStruk.append(tampil + " ");
            }
        }

        //Perhitungan Struktural   
        double jccrd1 = p2.struktural(jumpetri1, jumpetri2, Irisan);
        HasilHitungJC1.setText(String.valueOf(jccrd1));
        Arrays.fill(p2.tampungsemua, null);
        Arrays.fill(p2.tampungsemua2, null);

        double dice1 = p2.dice(jumpetri1, jumpetri2, Irisan);
        HasilHitungDice1.setText(String.valueOf(dice1));

        double cosine1 = p2.Cosine(jumpetri1, jumpetri2, Irisan);
        HasilHitungCS1.setText(String.valueOf(cosine1));

        if (jumpetri1 < jumpetri2) {
            Min = jumpetri1;
        } else {
            Min = jumpetri2;
        }

        double ov1 = p2.overlap(jumpetri1, jumpetri2, Min, Irisan);
        HasilHitungOV1.setText(String.valueOf(ov1));
        Random rand1 = new Random();
        double n1 = rand1.nextInt(100) + 1;
        n1 = n1 / 1000000;
        double hasil1 = jccrd1 + n1;
        double hasilcluster = hasil1 + avg;

        String hasilSimilarity1 = decimalFormat.format(hasil1);
        String hasilSim = decimalFormat.format(hasilcluster);

        modelSama1 = tampungirisanstrk;
        StrukCommonFragment1.add(modelSama1);
        //clustering.inputclus(Double.parseDouble(hasilSimilarity1), tampungirisanstrk, modelSama1);
        String InputNama1StrukGBSTRK = namamodel1.getText();
        String InputNama2StrukGBSTRK = namamodel2.getText();
        String InputKeMetricStrukGBSTRK[] = {InputNama1StrukGBSTRK, InputNama2StrukGBSTRK, hasilSimilarity1};
        String InputKeClusterStrukGBSTRK[] = {InputNama1StrukGBSTRK, " dan ", InputNama2StrukGBSTRK};
        addModel1(jccrd1, InputKeMetricStrukGBSTRK);

        klater.inputclus(AreaSem1.getText(), InputKeClusterStrukGBSTRK, modelSama1);

//            if(namamodel1.getText().contains("Akademik")&&namamodel2.getText().contains("Akademik")){
//                hasilcluster=1.0+hasil1+avg;
//                clustering.inputclus(hasilcluster, InputKeClusterStrukGBSTRK, modelSama1);
//            }
//            if(namamodel1.getText().contains("Kepegawaian")&&namamodel2.getText().contains("Kepegawaian")){
//                hasilcluster=4.0+hasil1+avg;
//                clustering.inputclus(hasilcluster, InputKeClusterStrukGBSTRK, modelSama1);
//            }
//            if(namamodel1.getText().contains("Kesantrian")&&namamodel2.getText().contains("Kesantrian")){
//                hasilcluster=7.0+hasil1+avg;
//                clustering.inputclus(hasilcluster, InputKeClusterStrukGBSTRK, modelSama1);
//            }
//            if(namamodel1.getText().contains("PSB")&&namamodel2.getText().contains("PSB")){
//                hasilcluster=10.0+hasil1+avg;
//                clustering.inputclus(hasilcluster, InputKeClusterStrukGBSTRK, modelSama1);
//            }
//            if(namamodel1.getText().contains("Sarpras")&&namamodel2.getText().contains("Sarpras")){
//                hasilcluster=13.0+hasil1+avg;
//                clustering.inputclus(hasilcluster, InputKeClusterStrukGBSTRK, modelSama1);
//            }
        //===================================================================================================================//
        ParsingLagiPanjangBhv pl = new ParsingLagiPanjangBhv();

        pl.Parsing(NamaModel1);
        pl.Parsing2(NamaModel2);
        jumpetri1 = 0;
        jumpetri2 = 0;
        for (int i = 0; i < pl.tampungsemua.length; i++) {
            if (pl.tampungsemua[i] != null) {
                System.out.println(pl.tampungsemua[i]);
                jumpetri1++;
                AreaPN1B.append(pl.tampungsemua[i] + "\n");

            }
        }
        for (int i = 0; i < pl.tampungsemua2.length; i++) {
            if (pl.tampungsemua2[i] != null) {
                System.out.println(pl.tampungsemua2[i]);
                jumpetri2++;
                AreaPN2B.append(pl.tampungsemua2[i] + "\n");
            }
        }

        Irisan = pl.intersect(pl.tampungsemua, pl.tampungsemua2).size() - 1;
        String[] tampungirisan = new String[30];
        for (String tampil : pl.intersect(pl.tampungsemua, pl.tampungsemua2)) {
            if (tampil != null) {
                if (tampungirisan[0] == null) {
                    tampungirisan[0] = tampil;
                } else if (tampungirisan[1] == null) {
                    tampungirisan[1] = tampil;
                } else if (tampungirisan[2] == null) {
                    tampungirisan[2] = tampil;
                } else if (tampungirisan[3] == null) {
                    tampungirisan[3] = tampil;
                } else if (tampungirisan[4] == null) {
                    tampungirisan[4] = tampil;
                } else if (tampungirisan[5] == null) {
                    tampungirisan[5] = tampil;
                } else if (tampungirisan[6] == null) {
                    tampungirisan[6] = tampil;
                } else if (tampungirisan[7] == null) {
                    tampungirisan[7] = tampil;
                } else if (tampungirisan[8] == null) {
                    tampungirisan[8] = tampil;
                } else if (tampungirisan[9] == null) {
                    tampungirisan[9] = tampil;

                } else if (tampungirisan[10] == null) {
                    tampungirisan[10] = tampil;

                } else if (tampungirisan[11] == null) {
                    tampungirisan[11] = tampil;

                } else if (tampungirisan[12] == null) {
                    tampungirisan[12] = tampil;

                } else if (tampungirisan[13] == null) {
                    tampungirisan[13] = tampil;

                } else if (tampungirisan[14] == null) {
                    tampungirisan[14] = tampil;

                } else if (tampungirisan[15] == null) {
                    tampungirisan[15] = tampil;

                } else if (tampungirisan[16] == null) {
                    tampungirisan[16] = tampil;

                } else if (tampungirisan[17] == null) {
                    tampungirisan[17] = tampil;

                } else if (tampungirisan[18] == null) {
                    tampungirisan[18] = tampil;

                } else if (tampungirisan[19] == null) {
                    tampungirisan[19] = tampil;

                } else if (tampungirisan[20] == null) {
                    tampungirisan[20] = tampil;

                } else if (tampungirisan[21] == null) {
                    tampungirisan[21] = tampil;

                } else if (tampungirisan[22] == null) {
                    tampungirisan[22] = tampil;

                } else if (tampungirisan[23] == null) {
                    tampungirisan[23] = tampil;

                } else if (tampungirisan[24] == null) {
                    tampungirisan[24] = tampil;

                } else if (tampungirisan[25] == null) {
                    tampungirisan[25] = tampil;

                } else if (tampungirisan[26] == null) {
                    tampungirisan[26] = tampil;

                } else if (tampungirisan[27] == null) {
                    tampungirisan[27] = tampil;

                } else if (tampungirisan[28] == null) {
                    tampungirisan[28] = tampil;

                } else if (tampungirisan[29] == null) {
                    tampungirisan[29] = tampil;

                }
                System.out.println("hasilnya : " + tampil);
                AreaIrisanBhv.append(tampil + " ");
            }
        }

        double jccrd = pl.struktural(jumpetri1, jumpetri2, Irisan);
        HasilHitungJC2.setText(String.valueOf(jccrd));
        Arrays.fill(pl.tampungsemua, null);
        Arrays.fill(pl.tampungsemua2, null);

        double dice = pl.dice(jumpetri1, jumpetri2, Irisan);
        HasilHitungDice2.setText(String.valueOf(dice));

        double cosine = pl.Cosine(jumpetri1, jumpetri2, Irisan);
        HasilHitungCS2.setText(String.valueOf(cosine));

        if (jumpetri1 < jumpetri2) {
            Min = jumpetri1;
        } else {
            Min = jumpetri2;
        }

        double ov = pl.overlap(jumpetri1, jumpetri2, Min, Irisan);
        HasilHitungOV2.setText(String.valueOf(ov));
        Random rand = new Random();
        double n = rand.nextInt(100) + 1;
        n = n / 1000000;
        double hasil = jccrd + n;
        double hasilclusterbhv;

        String hasilSimilarity = decimalFormat.format(hasil);

        modelSama2 = tampungirisan;
        StrukCommonFragment2.add(modelSama2);

        String InputNamaBhv1 = namamodel1.getText();
        String InputNamaBhv2 = namamodel2.getText();
        String InputKeMetricBhv[] = {InputNamaBhv1, InputNamaBhv2, hasilSimilarity};
        String InputKeClusterBhv[] = {InputNamaBhv1, " dan ", InputNamaBhv2};
        addModel2(jccrd, InputKeMetricBhv);
        //clusteringkopi.inputclus(Double.parseDouble(hasilSimilarity), InputKeClusterBhv, modelSama2);untuk keluarkan cluster minimalis
        //clusteringkopi.inputclus(hasil, InputKeClusterBhv, modelSama2);

        if (namamodel1.getText().contains("Akademik") && namamodel2.getText().contains("Akademik")) {
            hasilclusterbhv = 1.0 + hasil + avg;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("Kepegawaian") && namamodel2.getText().contains("Kepegawaian")) {
            hasilclusterbhv = 4.0 + hasil + avg;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("Kesantrian") && namamodel2.getText().contains("Kesantrian")) {
            hasilclusterbhv = 7.0 + hasil + avg;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("PSB") && namamodel2.getText().contains("PSB")) {
            hasilclusterbhv = 10.0 + hasil + avg;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("Sarpras") && namamodel2.getText().contains("Sarpras")) {
            hasilclusterbhv = 13.0 + hasil + avg;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
//=============================================================================================================//

    }

    void strukturalutama() {
        //Panggil kelas parsing

        ParsingLagiPanjangStruk p2 = new ParsingLagiPanjangStruk();

        //======================
        p2.Parsing(NamaModel1);
        p2.Parsing2(NamaModel2);

        jumpetri1 = 0;
        jumpetri2 = 0;

        //Struktural
        for (int i = 0; i < p2.tampungsemua.length; i++) {
            if (p2.tampungsemua[i] != null) {
                System.out.println(p2.tampungsemua[i]);
                jumpetri1++;
                AreaPN1A.append(p2.tampungsemua[i] + "\n");
            }
        }

        for (int i = 0; i < p2.tampungsemua2.length; i++) {
            if (p2.tampungsemua2[i] != null) {
                System.out.println(p2.tampungsemua2[i]);
                jumpetri2++;
                AreaPN2A.append(p2.tampungsemua2[i] + "\n");
            }
        }

        Irisan = p2.intersect(p2.tampungsemua, p2.tampungsemua2).size() - 1;
        String[] tampungirisanstrk = new String[30];

        for (String tampil : p2.intersect(p2.tampungsemua, p2.tampungsemua2)) {
            if (tampil != null) {
                if (tampungirisanstrk[0] == null) {
                    tampungirisanstrk[0] = tampil;
                } else if (tampungirisanstrk[1] == null) {
                    tampungirisanstrk[1] = tampil;
                } else if (tampungirisanstrk[2] == null) {
                    tampungirisanstrk[2] = tampil;
                } else if (tampungirisanstrk[3] == null) {
                    tampungirisanstrk[3] = tampil;
                } else if (tampungirisanstrk[4] == null) {
                    tampungirisanstrk[4] = tampil;
                } else if (tampungirisanstrk[5] == null) {
                    tampungirisanstrk[5] = tampil;
                } else if (tampungirisanstrk[6] == null) {
                    tampungirisanstrk[6] = tampil;
                } else if (tampungirisanstrk[7] == null) {
                    tampungirisanstrk[7] = tampil;
                } else if (tampungirisanstrk[8] == null) {
                    tampungirisanstrk[8] = tampil;
                } else if (tampungirisanstrk[9] == null) {
                    tampungirisanstrk[9] = tampil;
                } else if (tampungirisanstrk[10] == null) {
                    tampungirisanstrk[10] = tampil;
                } else if (tampungirisanstrk[11] == null) {
                    tampungirisanstrk[11] = tampil;
                } else if (tampungirisanstrk[12] == null) {
                    tampungirisanstrk[12] = tampil;
                } else if (tampungirisanstrk[13] == null) {
                    tampungirisanstrk[13] = tampil;
                } else if (tampungirisanstrk[14] == null) {
                    tampungirisanstrk[14] = tampil;
                } else if (tampungirisanstrk[15] == null) {
                    tampungirisanstrk[15] = tampil;
                } else if (tampungirisanstrk[16] == null) {
                    tampungirisanstrk[16] = tampil;
                } else if (tampungirisanstrk[17] == null) {
                    tampungirisanstrk[17] = tampil;
                } else if (tampungirisanstrk[18] == null) {
                    tampungirisanstrk[18] = tampil;
                } else if (tampungirisanstrk[19] == null) {
                    tampungirisanstrk[19] = tampil;
                } else if (tampungirisanstrk[20] == null) {
                    tampungirisanstrk[20] = tampil;
                } else if (tampungirisanstrk[21] == null) {
                    tampungirisanstrk[21] = tampil;
                } else if (tampungirisanstrk[22] == null) {
                    tampungirisanstrk[22] = tampil;
                } else if (tampungirisanstrk[23] == null) {
                    tampungirisanstrk[23] = tampil;
                } else if (tampungirisanstrk[24] == null) {
                    tampungirisanstrk[24] = tampil;
                } else if (tampungirisanstrk[25] == null) {
                    tampungirisanstrk[25] = tampil;
                } else if (tampungirisanstrk[26] == null) {
                    tampungirisanstrk[26] = tampil;
                } else if (tampungirisanstrk[27] == null) {
                    tampungirisanstrk[27] = tampil;
                } else if (tampungirisanstrk[28] == null) {
                    tampungirisanstrk[28] = tampil;
                } else if (tampungirisanstrk[29] == null) {
                    tampungirisanstrk[29] = tampil;
                }
                System.out.println("hasilnya : " + tampil);
                AreaIrisanStruk.append(tampil + " ");
            }
        }

        //Perhitungan Struktural   
        double jccrd1 = p2.struktural(jumpetri1, jumpetri2, Irisan);
        HasilHitungJC1.setText(String.valueOf(jccrd1));
        Arrays.fill(p2.tampungsemua, null);
        Arrays.fill(p2.tampungsemua2, null);

        double dice1 = p2.dice(jumpetri1, jumpetri2, Irisan);
        HasilHitungDice1.setText(String.valueOf(dice1));

        double cosine1 = p2.Cosine(jumpetri1, jumpetri2, Irisan);
        HasilHitungCS1.setText(String.valueOf(cosine1));

        if (jumpetri1 < jumpetri2) {
            Min = jumpetri1;
        } else {
            Min = jumpetri2;
        }

        double ov1 = p2.overlap(jumpetri1, jumpetri2, Min, Irisan);
        HasilHitungOV1.setText(String.valueOf(ov1));
        Random rand1 = new Random();
        double n1 = rand1.nextInt(100) + 1;
        n1 = n1 / 1000000;
        double hasil1 = jccrd1 + n1;
        double hasilcluster;

        String hasilSimilarity1 = decimalFormat.format(hasil1);

        modelSama1 = tampungirisanstrk;
        StrukCommonFragment1.add(modelSama1);
        //clustering.inputclus(Double.parseDouble(hasilSimilarity1), tampungirisanstrk, modelSama1);
        String InputNama1Struk = namamodel1.getText();
        String InputNama2Struk = namamodel2.getText();
        String InputKeMetricStruk[] = {InputNama1Struk, InputNama2Struk, hasilSimilarity1};
        String InputKeClusterStruk[] = {InputNama1Struk, " dan ", InputNama2Struk};
        addModel1(jccrd1, InputKeMetricStruk);

        if (namamodel1.getText().contains("Akademik") && namamodel2.getText().contains("Akademik")) {
            hasilcluster = 1.0 + hasil1;
            clustering.inputclus(hasilcluster, InputKeClusterStruk, modelSama1);
        }
        if (namamodel1.getText().contains("Kepegawaian") && namamodel2.getText().contains("Kepegawaian")) {
            hasilcluster = 3.0 + hasil1;
            clustering.inputclus(hasilcluster, InputKeClusterStruk, modelSama1);
        }
        if (namamodel1.getText().contains("Kesantrian") && namamodel2.getText().contains("Kesantrian")) {
            hasilcluster = 5.0 + hasil1;
            clustering.inputclus(hasilcluster, InputKeClusterStruk, modelSama1);
        }
        if (namamodel1.getText().contains("PSB") && namamodel2.getText().contains("PSB")) {
            hasilcluster = 7.0 + hasil1;
            clustering.inputclus(hasilcluster, InputKeClusterStruk, modelSama1);
        }
        if (namamodel1.getText().contains("Sarpras") && namamodel2.getText().contains("Sarpras")) {
            hasilcluster = 9.0 + hasil1;
            clustering.inputclus(hasilcluster, InputKeClusterStruk, modelSama1);
        }

    }

    void behavioralutama() {
        ParsingLagiPanjangBhv pl = new ParsingLagiPanjangBhv();

        pl.Parsing(NamaModel1);
        pl.Parsing2(NamaModel2);
        jumpetri1 = 0;
        jumpetri2 = 0;
        for (int i = 0; i < pl.tampungsemua.length; i++) {
            if (pl.tampungsemua[i] != null) {
                System.out.println(pl.tampungsemua[i]);
                jumpetri1++;
                AreaPN1B.append(pl.tampungsemua[i] + "\n");

            }
        }
        for (int i = 0; i < pl.tampungsemua2.length; i++) {
            if (pl.tampungsemua2[i] != null) {
                System.out.println(pl.tampungsemua2[i]);
                jumpetri2++;
                AreaPN2B.append(pl.tampungsemua2[i] + "\n");
            }
        }

        Irisan = pl.intersect(pl.tampungsemua, pl.tampungsemua2).size() - 1;
        String[] tampungirisan = new String[30];
        for (String tampil : pl.intersect(pl.tampungsemua, pl.tampungsemua2)) {
            if (tampil != null) {
                if (tampungirisan[0] == null) {
                    tampungirisan[0] = tampil;
                } else if (tampungirisan[1] == null) {
                    tampungirisan[1] = tampil;
                } else if (tampungirisan[2] == null) {
                    tampungirisan[2] = tampil;
                } else if (tampungirisan[3] == null) {
                    tampungirisan[3] = tampil;
                } else if (tampungirisan[4] == null) {
                    tampungirisan[4] = tampil;
                } else if (tampungirisan[5] == null) {
                    tampungirisan[5] = tampil;
                } else if (tampungirisan[6] == null) {
                    tampungirisan[6] = tampil;
                } else if (tampungirisan[7] == null) {
                    tampungirisan[7] = tampil;
                } else if (tampungirisan[8] == null) {
                    tampungirisan[8] = tampil;
                } else if (tampungirisan[9] == null) {
                    tampungirisan[9] = tampil;

                } else if (tampungirisan[10] == null) {
                    tampungirisan[10] = tampil;

                } else if (tampungirisan[11] == null) {
                    tampungirisan[11] = tampil;

                } else if (tampungirisan[12] == null) {
                    tampungirisan[12] = tampil;

                } else if (tampungirisan[13] == null) {
                    tampungirisan[13] = tampil;

                } else if (tampungirisan[14] == null) {
                    tampungirisan[14] = tampil;

                } else if (tampungirisan[15] == null) {
                    tampungirisan[15] = tampil;

                } else if (tampungirisan[16] == null) {
                    tampungirisan[16] = tampil;

                } else if (tampungirisan[17] == null) {
                    tampungirisan[17] = tampil;

                } else if (tampungirisan[18] == null) {
                    tampungirisan[18] = tampil;

                } else if (tampungirisan[19] == null) {
                    tampungirisan[19] = tampil;

                } else if (tampungirisan[20] == null) {
                    tampungirisan[20] = tampil;

                } else if (tampungirisan[21] == null) {
                    tampungirisan[21] = tampil;

                } else if (tampungirisan[22] == null) {
                    tampungirisan[22] = tampil;

                } else if (tampungirisan[23] == null) {
                    tampungirisan[23] = tampil;

                } else if (tampungirisan[24] == null) {
                    tampungirisan[24] = tampil;

                } else if (tampungirisan[25] == null) {
                    tampungirisan[25] = tampil;

                } else if (tampungirisan[26] == null) {
                    tampungirisan[26] = tampil;

                } else if (tampungirisan[27] == null) {
                    tampungirisan[27] = tampil;

                } else if (tampungirisan[28] == null) {
                    tampungirisan[28] = tampil;

                } else if (tampungirisan[29] == null) {
                    tampungirisan[29] = tampil;

                }
                System.out.println("hasilnya : " + tampil);
                AreaIrisanBhv.append(tampil + " ");
            }
        }

        double jccrd = pl.struktural(jumpetri1, jumpetri2, Irisan);
        HasilHitungJC2.setText(String.valueOf(jccrd));
        Arrays.fill(pl.tampungsemua, null);
        Arrays.fill(pl.tampungsemua2, null);

        double dice = pl.dice(jumpetri1, jumpetri2, Irisan);
        HasilHitungDice2.setText(String.valueOf(dice));

        double cosine = pl.Cosine(jumpetri1, jumpetri2, Irisan);
        HasilHitungCS2.setText(String.valueOf(cosine));

        if (jumpetri1 < jumpetri2) {
            Min = jumpetri1;
        } else {
            Min = jumpetri2;
        }

        double ov = pl.overlap(jumpetri1, jumpetri2, Min, Irisan);
        HasilHitungOV2.setText(String.valueOf(ov));
        Random rand = new Random();
        double n = rand.nextInt(100) + 1;
        n = n / 1000000;
        double hasil = jccrd + n;
        double hasilclusterbhv;

        String hasilSimilarity = decimalFormat.format(hasil);

        modelSama2 = tampungirisan;
        StrukCommonFragment2.add(modelSama2);

        String InputNamaBhv1 = namamodel1.getText();
        String InputNamaBhv2 = namamodel2.getText();
        String InputKeMetricBhv[] = {InputNamaBhv1, InputNamaBhv2, hasilSimilarity};
        String InputKeClusterBhv[] = {InputNamaBhv1, " dan ", InputNamaBhv2};
        addModel2(jccrd, InputKeMetricBhv);
        //clusteringkopi.inputclus(Double.parseDouble(hasilSimilarity), InputKeClusterBhv, modelSama2);untuk keluarkan cluster minimalis
        //clusteringkopi.inputclus(hasil, InputKeClusterBhv, modelSama2);

        if (namamodel1.getText().contains("Akademik") && namamodel2.getText().contains("Akademik")) {
            hasilclusterbhv = 1.0 + hasil;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("Kepegawaian") && namamodel2.getText().contains("Kepegawaian")) {
            hasilclusterbhv = 3.0 + hasil;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("Kesantrian") && namamodel2.getText().contains("Kesantrian")) {
            hasilclusterbhv = 5.0 + hasil;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("PSB") && namamodel2.getText().contains("PSB")) {
            hasilclusterbhv = 7.0 + hasil;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }
        if (namamodel1.getText().contains("Sarpras") && namamodel2.getText().contains("Sarpras")) {
            hasilclusterbhv = 9.0 + hasil;
            clusteringkopi.inputclus(hasilclusterbhv, InputKeClusterBhv, modelSama2);
        }

    }

    void semantikutama() {
        ParsingSmtStruk jdm = new ParsingSmtStruk();
        jdm.Parsing1(NamaModel1);
        jdm.Parsing2(NamaModel2);
        jumpetris1 = 0;
        jumpetris2 = 0;
        for (int i = 0; i < jdm.transisi1.length; i++) {
            if (jdm.transisi1[i] != null) {
                System.out.println(jdm.transisi1[i]);
                jumpetris1++;
                AreaSem1.append(jdm.transisi1[i] + "\n");
            }
        }
        cocok1a.setText(jdm.transisi1[0]);
        cocok2a.setText(jdm.transisi1[1]);
        cocok3a.setText(jdm.transisi1[2]);
        cocok4a.setText(jdm.transisi1[3]);
        cocok5a.setText(jdm.transisi1[4]);
        cocok6a.setText(jdm.transisi1[5]);
        cocok7a.setText(jdm.transisi1[6]);
        cocok8a.setText(jdm.transisi1[7]);
        cocok9a.setText(jdm.transisi1[8]);
        cocok10a.setText(jdm.transisi1[9]);

        for (int i = 0; i < jdm.transisi2.length; i++) {
            if (jdm.transisi2[i] != null) {
                System.out.println(jdm.transisi2[i]);
                jumpetris2++;
                AreaSem2.append(jdm.transisi2[i] + "\n");
            }
        }
        cocok1b.setText(jdm.transisi2[0]);
        cocok2b.setText(jdm.transisi2[1]);
        cocok3b.setText(jdm.transisi2[2]);
        cocok4b.setText(jdm.transisi2[3]);
        cocok5b.setText(jdm.transisi2[4]);
        cocok6b.setText(jdm.transisi2[5]);
        cocok7b.setText(jdm.transisi2[6]);
        cocok8b.setText(jdm.transisi2[7]);
        cocok9b.setText(jdm.transisi2[8]);
        cocok10b.setText(jdm.transisi2[9]);
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    void commonbhv() {
        for (int i = 0; i < ListStrukCommonBhv.size(); i++) {
            String[] modelPnml = ListStrukCommonBhv.get(i);

            for (int j = 0; j < modelPnml.length; j++) {
                System.out.print(modelPnml[j] + "  ");
            }
            System.out.println("");
        }

        Set<String> s1 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(0)));
        Set<String> s2 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(1)));
        s1.retainAll(s2);
        String[] result = s1.toArray(new String[s1.size()]);

        TempatPNMLBhv.setText("");
        for (int j = 0; j < result.length; j++) {
            if (result[j] != null) {
                TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result[j]);
            }
        }

        String[] result1 = null, result2 = null, result3 = null, result4 = null, result5 = null, result6;

        if (3 <= ListStrukCommonBhv.size()) {
            TempatPNMLBhv.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(2)));
            s3.retainAll(s4);
            result1 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result1.length; j++) {
                if (result1[j] != null) {
                    TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result1[j]);
                    System.out.print(result1[j] + "  ");
                }
            }
        }
        if (4 <= ListStrukCommonBhv.size()) {
            TempatPNMLBhv.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result1));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(3)));
            s3.retainAll(s4);
            result2 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result2.length; j++) {
                if (result2[j] != null) {
                    TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result2[j]);
                    System.out.print(result2[j] + "  ");
                }
            }
        }

        if (5 <= ListStrukCommonBhv.size()) {
            TempatPNMLBhv.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result2));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(4)));
            s3.retainAll(s4);
            result3 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result3.length; j++) {
                if (result3[j] != null) {
                    TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result3[j]);
                    System.out.print(result3[j] + "  ");
                }
            }
        }

        if (6 <= ListStrukCommonBhv.size()) {
            TempatPNMLBhv.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result3));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(5)));
            s3.retainAll(s4);
            result4 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result4.length; j++) {
                if (result4[j] != null) {
                    TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result4[j]);
                    System.out.print(result4[j] + "  ");
                }
            }
        }
        if (7 <= ListStrukCommonBhv.size()) {
            TempatPNMLBhv.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result4));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(6)));
            s3.retainAll(s4);
            result5 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result5.length; j++) {
                if (result5[j] != null) {
                    TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result5[j]);
                    System.out.print(result5[j] + "  ");
                }
            }
        }

        if (8 <= ListStrukCommonBhv.size()) {
            TempatPNMLBhv.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result5));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonBhv.get(7)));
            s3.retainAll(s4);
            result6 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result6.length; j++) {
                if (result6[j] != null) {
                    TempatPNMLBhv.setText(TempatPNMLBhv.getText() + " " + result6[j]);
                    System.out.print(result6[j] + "  ");
                }
            }
        }

        String hasil = TempatPNMLBhv.getText().replaceAll("\\s+", "");
        String[] pisah = pisahkanTeks(hasil);

        new createXML().buatXML(pisah);
    }

    void commonstrk() {
        Set<String> s1 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(0)));
        Set<String> s2 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(1)));
        s1.retainAll(s2);
        String[] result = s1.toArray(new String[s1.size()]);

        TempatPNMLStrk.setText("");
        for (int j = 0; j < result.length; j++) {
            if (result[j] != null) {
                TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result[j]);
            }
        }

        String[] result1 = null, result2 = null, result3 = null, result4 = null, result5 = null, result6;

        if (3 <= ListStrukCommonStruk.size()) {
            TempatPNMLStrk.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(2)));
            s3.retainAll(s4);
            result1 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result1.length; j++) {
                if (result1[j] != null) {
                    TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result1[j]);
                    System.out.print(result1[j] + "  ");
                }
            }
        }

        if (4 <= ListStrukCommonStruk.size()) {
            TempatPNMLStrk.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result1));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(3)));
            s3.retainAll(s4);
            result2 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result2.length; j++) {
                if (result2[j] != null) {
                    TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result2[j]);
                    System.out.print(result2[j] + "  ");
                }
            }
        }

        if (5 <= ListStrukCommonStruk.size()) {
            TempatPNMLStrk.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result2));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(4)));
            s3.retainAll(s4);
            result3 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result3.length; j++) {
                if (result3[j] != null) {
                    TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result3[j]);
                    System.out.print(result3[j] + "  ");
                }
            }
        }

        if (6 <= ListStrukCommonStruk.size()) {
            TempatPNMLStrk.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result3));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(5)));
            s3.retainAll(s4);
            result4 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result4.length; j++) {
                if (result4[j] != null) {
                    TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result4[j]);
                    System.out.print(result4[j] + "  ");
                }
            }
        }
        if (7 <= ListStrukCommonStruk.size()) {
            TempatPNMLStrk.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result4));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(6)));
            s3.retainAll(s4);
            result5 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result5.length; j++) {
                if (result5[j] != null) {
                    TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result5[j]);
                    System.out.print(result5[j] + "  ");
                }
            }
        }

        if (8 <= ListStrukCommonStruk.size()) {
            TempatPNMLStrk.setText("");
            Set<String> s3 = new HashSet<String>(Arrays.asList(result5));
            Set<String> s4 = new HashSet<String>(Arrays.asList(ListStrukCommonStruk.get(7)));
            s3.retainAll(s4);
            result6 = s3.toArray(new String[s3.size()]);

            for (int j = 0; j < result6.length; j++) {
                if (result6[j] != null) {
                    TempatPNMLStrk.setText(TempatPNMLStrk.getText() + " " + result6[j]);
                    System.out.print(result6[j] + "  ");
                }
            }
        }
        String hasil = TempatPNMLStrk.getText().replaceAll("\\s+", "");
        String[] pisah = pisahkanTeksStrk(hasil);

        Set<String> s3 = new HashSet<String>(Arrays.asList(pisah));
        Set<String> s4 = new HashSet<String>(Arrays.asList("t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12", "t13", "t14", "t15", "t16", "t17"));
        String[] hasilGenerate = null;
        s3.retainAll(s4);
        hasilGenerate = s3.toArray(new String[s3.size()]);

        for (int i = 0; i < hasilGenerate.length; i++) {
            System.out.print(hasilGenerate[i] + " ");
        }

        new createXML_Strk().buatXML(hasilGenerate);
    }

    ArrayList<String[]> pisahText = new ArrayList<>();

    void commonmix() {
        Commonmix.setText(TempatPNMLBhv.getText() + " " + TempatPNMLStrk.getText());
        String gabungan = Commonmix.getText().replaceAll("\\s+", "");;
        String pisah[] = pisahkanTeks(gabungan);

        Set<String> s3b = new HashSet<String>(Arrays.asList(pisah));
        Set<String> s4b = new HashSet<String>(Arrays.asList("t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "t10", "t11", "t12", "t13", "t14", "t15", "t16", "t17"));
        String[] hasilGenerateb = null;
        s3b.retainAll(s4b);
        hasilGenerateb = s3b.toArray(new String[s3b.size()]);

        for (int i = 0; i < hasilGenerateb.length; i++) {
            System.out.print(hasilGenerateb[i] + " ");
        }

        new createXML_Common().buatXML(hasilGenerateb);

    }

    String[] pisahkanTeks(String text) {
        String teksnya = text;
        if (teksnya.length() % 2 == 0) {
            teksnya = text;
        } else {
            teksnya = text + "a";
        }
        assert teksnya.length() % 2 == 0;
        System.out.println(teksnya.length());
        String[] teks2karakter = new String[teksnya.length() / 2];
        for (int index = 0; index < teks2karakter.length; index++) {
            teks2karakter[index] = teksnya.substring(index * 2, index * 2 + 2);
            System.out.println(teks2karakter[index]);
            if (teks2karakter[index].substring(0, 1).equals("t")) {
            }
            pisahText.add(teks2karakter);

        }
        return teks2karakter;
    }

    String[] pisahkanTeksStrk(String text) {
        String teksnya = text;
        if (teksnya.length() % 2 == 0) {
            teksnya = text;
        } else {
            teksnya = text + "a";
        }
        assert teksnya.length() % 2 == 0;
        System.out.println(teksnya.length());
        String[] teks2karakter = new String[teksnya.length() / 2];
        for (int index = 0; index < teks2karakter.length; index++) {
            teks2karakter[index] = teksnya.substring(index * 2, index * 2 + 2);
            System.out.println(teks2karakter[index]);
            if (teks2karakter[index].substring(0, 1).equals("t")) {
            }
            pisahText.add(teks2karakter);

        }
        return teks2karakter;
    }

    public void tampilclus(String treshol) {
        Clusterstruk.setText("");

        for (Map.Entry<String, ArrayList<String[]>> entry : klater.map.entrySet()) {

            if (entry.getKey().contains(treshol)) {

                for (int i = 0; i < entry.getValue().size(); i++) {
                    String[] modelpml = entry.getValue().get(i);

                    for (int j = 0; j < modelpml.length; j++) {
                        if (modelpml[j] != null) {

                            Clusterstruk.append(modelpml[j] + "  ");

                        }
                    }
                }
                Clusterstruk.append((" | ==================== " + entry.getKey()));
                System.out.println();
                Clusterstruk.append("\n");
            }
        }
        Commonstrk.setText("");
        ListStrukCommonStruk = new ArrayList<>();
        for (Map.Entry<String, String[]> entry : klater.mapstruk.entrySet()) {
            if (entry.getKey().contains(treshol)) {
                String[] modelPNML = entry.getValue();
                ListStrukCommonStruk.add(modelPNML);
                for (int j = 0; j < modelPNML.length; j++) {
                    if (modelPNML[j] != null) {
                        System.out.print(modelPNML[j] + " ");
                        Commonstrk.append("{" + modelPNML[j] + "}");
                    }
                }
                System.out.println();
                Commonstrk.append("\n");
            }
        }
    }

    public void tampilclus2(double treshol, double bts2) {
        Clusterbhv.setText("");
        for (Map.Entry<Double, ArrayList<String[]>> entry : clusteringkopi.map.entrySet()) {
            if (entry.getKey() >= treshol && entry.getKey() < bts2) {
                System.out.print(entry.getKey() + " | ");
                Clusterbhv.append((entry.getKey() + " | "));
                for (int i = 0; i < entry.getValue().size(); i++) {
                    String[] modelpml = entry.getValue().get(i);
                    for (int j = 0; j < modelpml.length; j++) {
                        if (modelpml[j] != null) {
                            System.out.print(modelpml[j] + " ");
                            Clusterbhv.append(modelpml[j] + " ");
                        }
                    }
                }
                System.out.println();
                Clusterbhv.append("\n");

            }
        }
        Commonbhv.setText("");
        ListStrukCommonBhv = new ArrayList<>();
        for (Map.Entry<Double, String[]> entry : clusteringkopi.mapstruk.entrySet()) {
            if (entry.getKey() >= treshol && entry.getKey() < bts2) {
                String[] modelPNML = entry.getValue();
                ListStrukCommonBhv.add(modelPNML);
                for (int j = 0; j < modelPNML.length; j++) {
                    if (modelPNML[j] != null) {
                        System.out.print(modelPNML[j] + " ");
                        Commonbhv.append("{" + modelPNML[j] + "}");
                    }
                }
                System.out.println();
                Commonbhv.append("\n");
            }
        }
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        ParsingLagiPanjangStruk p1 = new ParsingLagiPanjangStruk();
        ParsingLagiPanjangBhv p2 = new ParsingLagiPanjangBhv();

        p1.kekosongan();
        p2.kekosongan();

        LoadArea1.setText(null);
        LoadArea2.setText(null);
        AreaPN1A.setText(null);
        AreaPN1B.setText(null);
        AreaPN2A.setText("");
        AreaPN2B.setText("");
        HasilHitungJC1.setText("");
        HasilHitungDice1.setText("");
        HasilHitungCS1.setText("");
        HasilHitungOV1.setText("");
        HasilHitungJC2.setText("");
        HasilHitungDice2.setText("");
        HasilHitungCS2.setText("");
        HasilHitungOV2.setText("");
        NamaModel1 = null;
        NamaModel2 = null;
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void buatcommonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buatcommonActionPerformed
        // TODO add your handling code here:

        commonbhv();
        commonstrk();
        commonmix();
    }//GEN-LAST:event_buatcommonActionPerformed

    private void thresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdActionPerformed
        // TODO add your handling code here:        

        //Th Struktural
        System.out.println("Treshol : " + tmpattres.getText() + " ");
        if (tmpattres.getText().equals("")) {
            tampilclus("a");
        } else {
            String nilaitres = tmpattres.getText();
            tampilclus(nilaitres);

        }
//        System.out.println("Treshol : " + tmpattres.getText() + " ");
//        if (tmpattres.getText().equals("")) {
//            tampilclus(0.0,15.9);
//        } else {
//            double nilaitres = Double.parseDouble(tmpattres.getText());
//            if (nilaitres >= 1 && nilaitres < 3.9) {
//                tampilclus(nilaitres,3.9);
//            } 
//            else if(nilaitres>=4&&nilaitres<6.9){
//                tampilclus(nilaitres, 6.9);
//            }
//            else if(nilaitres>=7&&nilaitres<9.9){
//                tampilclus(nilaitres, 9.9);
//            }
//            else if(nilaitres>=10&&nilaitres<12.9){
//                tampilclus(nilaitres, 12.9);
//            }
//            else if(nilaitres>=13&&nilaitres<15.9){
//                tampilclus(nilaitres, 15.9);
//            }
//            else {
//                JOptionPane.showMessageDialog(null, "nilai treshol antara 0-1");
//            }
//        }

        //Th behavioral
        System.out.println("Treshol : " + tmpattres.getText() + " ");
        if (tmpattres.getText().equals("")) {
            tampilclus2(0.0, 15.9);
        } else {
            double nilaitres = Double.parseDouble(tmpattres.getText());
            if (nilaitres >= 1 && nilaitres < 3.9) {
                tampilclus2(nilaitres, 3.9);
            } else if (nilaitres >= 4 && nilaitres < 6.9) {
                tampilclus2(nilaitres, 6.9);
            } else if (nilaitres >= 7 && nilaitres < 9.9) {
                tampilclus2(nilaitres, 9.9);
            } else if (nilaitres >= 10 && nilaitres < 12.9) {
                tampilclus2(nilaitres, 12.9);
            } else if (nilaitres >= 13 && nilaitres < 15.9) {
                tampilclus2(nilaitres, 15.9);
            } else {
                JOptionPane.showMessageDialog(null, "nilai treshol antara 0-1");
            }
        }
    }//GEN-LAST:event_thresholdActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Levenshtein lvs = new Levenshtein();
        if (cocok1a.getText().equals("") || cocok1b.getText().equals("")) {
            value1.setText(String.valueOf(0.0));
            temp[0] = 0.0;
        } else {
            value1.setText(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok1b.getText())));
            temp[0] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok1a.getText(), cocok1b.getText())));;
        }

        if (cocok2a.getText().equals("") || cocok2b.getText().equals("")) {
            value2.setText(String.valueOf(0.0));
            temp[1] = 0.0;
        } else {
            value2.setText(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok2b.getText())));
            temp[1] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok2a.getText(), cocok2b.getText())));
        }

        if (cocok3a.getText().equals("") || cocok3b.getText().equals("")) {
            value3.setText(String.valueOf(0.0));
            temp[2] = 0.0;
        } else {
            value3.setText(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok3b.getText())));
            temp[2] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok3a.getText(), cocok3b.getText())));
        }

        if (cocok4a.getText().equals("") || cocok4b.getText().equals("")) {
            value4.setText(String.valueOf(0.0));
            temp[3] = 0.0;
        } else {
            value4.setText(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok4b.getText())));
            temp[3] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok4a.getText(), cocok4b.getText())));
        }
        if (cocok5a.getText().equals("") || cocok5b.getText().equals("")) {
            value5.setText(String.valueOf(0.0));
            temp[4] = 0.0;
        } else {
            value5.setText(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok5b.getText())));
            temp[4] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok5a.getText(), cocok5b.getText())));

        }
        if (cocok6a.getText().equals("") || cocok6b.getText().equals("")) {
            value6.setText(String.valueOf(0.0));
            temp[5] = 0.0;
        } else {
            value6.setText(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok6b.getText())));
            temp[5] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok6a.getText(), cocok6b.getText())));
        }

        if (cocok7a.getText().equals("") || cocok7b.getText().equals("")) {
            value7.setText(String.valueOf(0.0));
            temp[6] = 0.0;
        } else {
            value7.setText(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok7b.getText())));
            temp[6] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok7a.getText(), cocok7b.getText())));
        }
        if (cocok8a.getText().equals("") || cocok8b.getText().equals("")) {
            value8.setText(String.valueOf(0.0));
            temp[7] = 0.0;
        } else {
            value8.setText(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok8b.getText())));
            temp[7] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok8a.getText(), cocok8b.getText())));
        }
        if (cocok9a.getText().equals("") || cocok9b.getText().equals("")) {
            value9.setText(String.valueOf(0.0));
            temp[8] = 0.0;
        } else {
            value9.setText(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok9b.getText())));
            temp[8] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok9a.getText(), cocok9b.getText())));
        }
        if (cocok10a.getText().equals("") || cocok10b.getText().equals("")) {
            value10.setText(String.valueOf(0.0));
            temp[9] = 0.0;
        } else {
            value10.setText(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok10b.getText())));
            temp[9] = Double.parseDouble(String.format("%.3f ", lvs.similarity(cocok10a.getText(), cocok10b.getText())));
        }

        jumlah = 0;
        for (int cb = 0; cb < temp.length; cb++) {
            if (temp[cb] != 0.0) {
                System.out.print(temp[cb] + " ");
                jumlah++;
            }
        }
        System.out.println("jumlahnya " + jumlah);

        Bismillah apk = new Bismillah();
        double avg = apk.rata(temp[0], temp[1], temp[2], temp[3], temp[4], temp[5], temp[6], temp[7], temp[8], temp[9], jumlah);
        String hasilavg = decimalFormat.format(avg);
        valueavgsmn.setText(String.valueOf(avg));

        String InputNama1Struk = namamodel1.getText();
        String InputNama2Struk = namamodel2.getText();
        String InputKeMetricStruk[] = {InputNama1Struk, InputNama2Struk, hasilavg};
        addModelSemantik(InputKeMetricStruk);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here
//        if(jComboBox1.getSelectedItem()=="Akademik"){
//            tampilclus(1.0,3.9);
//            tampilclus2(1.0,3.9);
//        }
//        if(jComboBox1.getSelectedItem()=="Kepegawaian"){
//            tampilclus(4.0,6.9);
//            tampilclus2(4.0,6.9);
//        }
//        if(jComboBox1.getSelectedItem()=="Kesantrian"){
//            tampilclus(7.0,9.9);
//            tampilclus2(7.0,9.9);
//        }
//        if(jComboBox1.getSelectedItem()=="Penerimaan Siswa Baru"){
//            tampilclus(10.0,12.9);
//            tampilclus2(10.0,12.9);
//        }
//        if(jComboBox1.getSelectedItem()=="Sarana Dan Prasarana"){
//            tampilclus(13.0,15.9);
//            tampilclus2(13.0,15.9);
//        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    public double rata(double a, double b, double c, double d, double e, double f, double g, double h, double i, double j, double pembagi) {
        double operasiatas = (a + b + c + d + e + f + g + h + i + j);
        double operasibawah = operasiatas / pembagi;
        return operasibawah;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");

            //SwingUtilities.updateComponentTreeUI(new AplikasiTATI());
        } catch (Exception e) {

        }
        new Bismillah().setVisible(true);
        //new AplikasiTATI().setResizable(false);

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/p1af.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bismillah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bismillah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bismillah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bismillah.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and disp1ay the form */
//        java.awt.EventQueue.invokeLater(() -> {
//            //new AplikasiTATI().setVisible(true);
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Add;
    private javax.swing.JTextArea AreaIrisanBhv;
    private javax.swing.JTextArea AreaIrisanStruk;
    private javax.swing.JTextArea AreaMatrikBhv;
    private javax.swing.JTextArea AreaMatrikStrk;
    private javax.swing.JTextArea AreaMatrkSmt;
    private javax.swing.JTextArea AreaPN1A;
    private javax.swing.JTextArea AreaPN1B;
    private javax.swing.JTextArea AreaPN2A;
    private javax.swing.JTextArea AreaPN2B;
    private javax.swing.JTextArea AreaSem1;
    private javax.swing.JTextArea AreaSem2;
    private javax.swing.JTextArea Clusterbhv;
    private javax.swing.JScrollPane Clusterbhvangka;
    private javax.swing.JTextArea Clusterstruk;
    private javax.swing.JTextArea Clusterstrukangka;
    private javax.swing.JTextArea Commonbhv;
    private javax.swing.JTextField Commonmix;
    private javax.swing.JTextArea Commonstrk;
    private javax.swing.JTextField HasilHitungCS1;
    private javax.swing.JTextField HasilHitungCS2;
    private javax.swing.JTextField HasilHitungDice1;
    private javax.swing.JTextField HasilHitungDice2;
    private javax.swing.JTextField HasilHitungJC1;
    private javax.swing.JTextField HasilHitungJC2;
    private javax.swing.JTextField HasilHitungOV1;
    private javax.swing.JTextField HasilHitungOV2;
    private javax.swing.JButton Load1;
    private javax.swing.JButton Load2;
    private javax.swing.JTextField LoadArea1;
    private javax.swing.JTextField LoadArea2;
    private javax.swing.JButton Proses;
    private javax.swing.JButton Reset;
    private javax.swing.JTextField TempatPNMLBhv;
    private javax.swing.JTextField TempatPNMLStrk;
    private javax.swing.JButton buatcommon;
    private javax.swing.JTextField cocok10a;
    private javax.swing.JTextField cocok10b;
    private javax.swing.JTextField cocok1a;
    private javax.swing.JTextField cocok1b;
    private javax.swing.JTextField cocok2a;
    private javax.swing.JTextField cocok2b;
    private javax.swing.JTextField cocok3a;
    private javax.swing.JTextField cocok3b;
    private javax.swing.JTextField cocok4a;
    private javax.swing.JTextField cocok4b;
    private javax.swing.JTextField cocok5a;
    private javax.swing.JTextField cocok5b;
    private javax.swing.JTextField cocok6a;
    private javax.swing.JTextField cocok6b;
    private javax.swing.JTextField cocok7a;
    private javax.swing.JTextField cocok7b;
    private javax.swing.JTextField cocok8a;
    private javax.swing.JTextField cocok8b;
    private javax.swing.JTextField cocok9a;
    private javax.swing.JTextField cocok9b;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel namamodel1;
    private javax.swing.JLabel namamodel2;
    private javax.swing.JButton threshold;
    private javax.swing.JTextField tmpattres;
    private javax.swing.JTextField value1;
    private javax.swing.JTextField value10;
    private javax.swing.JTextField value2;
    private javax.swing.JTextField value3;
    private javax.swing.JTextField value4;
    private javax.swing.JTextField value5;
    private javax.swing.JTextField value6;
    private javax.swing.JTextField value7;
    private javax.swing.JTextField value8;
    private javax.swing.JTextField value9;
    private javax.swing.JTextField valueavgsmn;
    // End of variables declaration//GEN-END:variables
}
